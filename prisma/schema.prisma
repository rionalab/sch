// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  email     String    @unique
  role      Role      @default(Admin)
  profile   Employee?
}

model Post {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  published  Boolean    @default(false)
  title      String     @db.VarChar(255)
  authorId   Int?
  categories Category[]
  comments   Comment[]

  @@unique([authorId, title])
}

model Comment {
  id        Int      @id @default(autoincrement())
  comment   String
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Post     @relation(fields: [postId], references: [id])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

model Position {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  category  PositionCategory @default(Edu)
  employees Employee[]
}

model Employee {
  id Int @id @default(autoincrement())
  fullName          String
  photo             String
  bloodType         String?
  NIP               String         @unique
  email             String         @unique
  NIK               String         @unique
  phone1            String
  phone2            String?
  contractStatus    ContractStatus
  maritalStatus     MaritalStatus
  familyPhone       String
  idAddress         String
  houseAddress      String
  institution       String
  major             String
  degree            String
  tribe             String?
  unit              String?
  remarks           String
  fatherName        String
  motherName        String
  spouseName        String?
  childrenName      String?
  siblingName       String?
  religion          Religion
  gender            Gender
  hireDate          DateTime
  PKWTStart         DateTime?
  TMT               DateTime?
  PKWTEnd           DateTime?
  dob               DateTime
  placeOfBirth      String
  positionId        Int
  position          Position       @relation(fields: [positionId], references: [id])
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  user              User?          @relation(fields: [userId], references: [id])
  userId            Int            @unique
}

model Teacher {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  Course    Course[]
}

model Course {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  teacher     Teacher @relation(fields: [teacherId], references: [id])
  teacherId   Int
}

model Student {
  id        Int      @id @default(autoincrement())
  gender    Gender
  dob       DateTime
  remarks   String
  bloodType String
  firstName String
  address   String
  tribe     String
  religion  Religion
  photo     String
  lastName  String
  class     Class    @relation(fields: [classId], references: [id])
  classId   Int
}

model Class {
  id        Int       @id @default(autoincrement())
  className String
  teacherId Int?
  students  Student[]
}

model Department {
  id   Int    @id @default(autoincrement())
  name String
}

enum Gender {
  Male
  Female
}

enum Religion {
  Islam
  Budha
  Hindu
  Kristen
  Katolik
  Khonghucu
  Tradisional
  Others
}

enum MaritalStatus {
  Single
  Married
  Divorced
  Widowed
  Separated
}

enum Role {
  User
  Teacher
  Parent
  Student
  Admin
  Superadmin
}

enum PositionCategory {
  Edu
  NonEdu
}

enum ContractStatus {
  Active
  Inactive
  Resign
  Mutation
}
