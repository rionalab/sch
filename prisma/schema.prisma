// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int               @id @default(autoincrement())
  email              String            @unique
  role               RoleAction        @relation(fields: [roleId], references: [id])
  roleId             Int
  department         Department?       @relation(fields: [departmentId], references: [id])
  departmentId       Int?
  password           String            @default("admin")
  active             Boolean           @default(true)
  hasUpdatePassword  Boolean           @default(false)
  name               String
  lastLogin          DateTime?
  roleAccess         String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  deletedAt          DateTime?
  Profile            Profile?
  Employee           Employee?
  requestedPurchases PurchaseRequest[] @relation("RequesterRelation")
  approvedPurchases  PurchaseRequest[] @relation("ApproverRelation")
}

model StudentRegistrationInformation {
  id        Int                         @id @default(autoincrement())
  student   StudentRegistrationChildren @relation(fields: [studentId], references: [id])
  studentId Int                         @unique
  data      String                      @db.Text
}

model StudentRegistrationInterest {
  id        Int                         @id @default(autoincrement())
  student   StudentRegistrationChildren @relation(fields: [studentId], references: [id])
  studentId Int                         @unique
  data      String                      @db.Text
}

model StudentRegistrationParent {
  id        Int                         @id @default(autoincrement())
  student   StudentRegistrationChildren @relation(fields: [studentId], references: [id])
  studentId Int                         @unique
  data      String                      @db.Text
}

model StudentRegistrationChildren {
  id        Int       @id @default(autoincrement())
  data      String    @db.Text
  status    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  StudentRegistrationParent      StudentRegistrationParent?
  StudentRegistrationActivities  StudentRegistrationInterest?
  StudentRegistrationInformation StudentRegistrationInformation?
}

model UserAdmission {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  password       String    @default("admin")
  active         Boolean   @default(true)
  name           String
  lastLogin      DateTime?
  allowAdmission Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
}

model PurchaseRequest {
  id           Int                   @id @default(autoincrement())
  code         String                @unique
  requesterId  Int
  approverId   Int
  payment      String
  purchaseDate DateTime
  department   Department            @relation(fields: [departmentId], references: [id])
  departmentId Int
  deliveryDate DateTime
  remarks      String
  status       String
  items        PurchaseRequestItem[]
  requester    User                  @relation("RequesterRelation", fields: [requesterId], references: [id])
  approver     User                  @relation("ApproverRelation", fields: [approverId], references: [id])
  active       Boolean               @default(true)
  updatedAt    DateTime              @updatedAt
  createdAt    DateTime              @default(now())
  deletedAt    DateTime?
}

// Define the PurchaseRequestItem table
model PurchaseRequestItem {
  id                Int             @id @default(autoincrement())
  purchaseRequestId Int
  inventory         Inventory       @relation(fields: [inventoryId], references: [id])
  inventoryId       Int
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  remarks           String
  PurchaseRequest   PurchaseRequest @relation(fields: [purchaseRequestId], references: [id], onDelete: Cascade)

  @@index([purchaseRequestId], name: "idx_purchase_request_id")
}

model PurchaseItem {
  id              Int            @id @default(autoincrement())
  PurchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int?
  name            String
  price           Int
  quantity        Int
  Uom             Uom?           @relation(fields: [uomId], references: [id])
  uomId           Int?
}

model PurchaseOrder {
  id           Int            @id @default(autoincrement())
  code         String         @unique
  vendor       String
  items        PurchaseItem[]
  payment      String
  purchaseDate DateTime
  deliveryDate DateTime
  remarks      String
  status       String
  invoice      String //struk pembayaran
}

model RoleAction {
  id          Int       @id @default(autoincrement())
  label       String
  description String?
  name        Role      @unique
  actions     String    @db.Text
  roleAccess  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  active      Boolean   @default(true)
  deletedAt   DateTime?
  User        User[]
}

model Profile {
  id            Int       @id @default(autoincrement())
  fullName      String?
  photo         String?
  bloodType     String?
  email         String?   @unique
  NIK           String?   @unique
  phone1        String?
  phone2        String?
  maritalStatus String?
  familyPhone   String?
  idAddress     String?
  houseAddress  String?
  institution   String?
  user          User      @relation(fields: [userId], references: [id])
  userId        Int       @unique
  major         String?
  degree        String?
  tribe         String?
  remarks       String?
  fatherName    String?
  motherName    String?
  spouseName    String?
  childrenName  String?
  siblingName   String?
  religion      String?
  gender        String?
  dob           DateTime?
  placeOfBirth  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}

model Position {
  id          Int              @id @default(autoincrement())
  code        String           @unique @default(uuid())
  name        String           @unique
  description String?
  active      Boolean          @default(true)
  category    PositionCategory @default(Edu)
  employees   Employee[]
  roleAccess  String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
}

model Employee {
  id               Int                @id @default(autoincrement())
  fullName         String
  photo            String?
  bloodType        String?
  NIP              String             @unique
  email            String             @unique
  NIK              String             @unique
  phone1           String
  phone2           String?
  contractStatus   String
  maritalStatus    String
  familyPhone      String
  idAddress        String
  houseAddress     String
  institution      String
  major            String
  degree           String
  tribe            String?
  unit             String?
  remarks          String?
  fatherName       String
  motherName       String
  spouseName       String?
  childrenName     String?
  siblingName      String?
  religion         String
  gender           String
  hireDate         DateTime
  PKWTStart        DateTime?
  TMT              DateTime?
  PKWTEnd          DateTime?
  dob              DateTime
  placeOfBirth     String
  positionId       Int
  position         Position           @relation(fields: [positionId], references: [id])
  user             User?              @relation(fields: [userId], references: [id])
  userId           Int?               @unique
  Class            Class[]
  LeaveEntitlement LeaveEntitlement[]
  LeaveRequest     LeaveRequest[]
  roleAccess       String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
}

model Parent {
  id          Int       @id @default(autoincrement())
  motherName  String
  motherPhone String
  motherEmail String
  motherPhoto String
  fatherName  String
  fatherPhone String
  fatherEmail String
  fatherPhoto String
  address     String
  children    Student[]
  roleAccess  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Student {
  id              Int               @id @default(autoincrement())
  gender          String
  dob             DateTime
  remarks         String
  bloodType       String
  firstName       String
  address         String
  tribe           String
  religion        String
  photo           String
  lastName        String
  class           Class             @relation(fields: [classId], references: [id])
  classId         Int
  Parent          Parent?           @relation(fields: [parentId], references: [id])
  parentId        Int?
  Extracurricular Extracurricular[]
  roleAccess      String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
}

model Extracurricular {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  name        String
  description String
  active      Boolean
  paid        Boolean
  price       Int
  student     Student[]
  roleAccess  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Class {
  id               Int       @id @default(autoincrement())
  className        String
  conselourTeacher Employee  @relation(fields: [employeeId], references: [id])
  students         Student[]
  employeeId       Int
  roleAccess       String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
}

model Vendor {
  id         Int       @id @default(autoincrement())
  name       String
  accountNo  String
  code       String    @unique
  address    String
  phone      String
  fax        String?
  blacklist  Boolean   @default(false)
  remarks    String?
  roleAccess String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model WorkUnit {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  name        String    @unique
  description String
  status      Boolean
  roleAccess  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Department {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  code            String            @unique
  active          Boolean           @default(true)
  description     String?
  budget          Int               @default(0)
  Inventory       Inventory[]
  roleAccess      String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  User            User[]
  PurchaseRequest PurchaseRequest[]
}

model Uom {
  id                Int            @id @default(autoincrement())
  code              String         @unique
  name              String         @unique
  description       String
  acronym           String         @unique
  active            Boolean        @default(true)
  Inventory         Inventory[]
  roleAccess        String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  deletedAt         DateTime?
  PurchaseOrderItem PurchaseItem[]
}

model Inventory {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  code                String                @unique
  UOM                 Uom                   @relation(fields: [uomId], references: [id])
  uomId               Int
  owner               Department?           @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  remarks             String?
  qty                 Int                   @default(0)
  category            String                @default("inventory")
  departmentId        Int?
  roleAccess          String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  PurchaseRequestItem PurchaseRequestItem[]
}

model LeaveType {
  id           Int            @id @default(autoincrement())
  code         String         @unique
  name         String
  active       Boolean        @default(true)
  description  String?
  LeaveRequest LeaveRequest[]
  roleAccess   String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
}

model LeaveEntitlement {
  id          Int       @id @default(autoincrement())
  entitlement Float
  remarks     String
  year        Int
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  Int
  roleAccess  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model LeaveRequest {
  id              Int       @id @default(autoincrement())
  employee        Employee? @relation(fields: [employeeId], references: [id])
  employeeId      Int?
  leaveType       LeaveType @relation(fields: [leaveTypeId], references: [id])
  leaveTypeId     Int
  status          String
  remarks         String
  approvalRemarks String?
  dateFrom        DateTime
  dateTo          DateTime
  roleAccess      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
}

enum Role {
  Superadmin
  Administrator
  Chairman
  ManagerSchool
  Principal
  Teacher
  ManagerFinance
  StaffFinance
  ManagerMarketing
  StaffMarketing
  ManagerGeneralAffair
  StaffGeneralAffair
  ModulPurchasing
  ManagerPurchasing
  StaffPurchasing
  ModulHumanResource
  ManagerHRD
  StaffHRD
  ManagerIT
  StaffIT
  Parent
}

enum PositionCategory {
  Edu
  NonEdu
}
