// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model RoleAction {
  id         Int       @id @default(autoincrement())
  name       Role      @unique
  actions    String    @db.Text
  roleAccess String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  User       User[]
}

model User {
  id                Int        @id @default(autoincrement())
  email             String     @unique
  role              RoleAction @relation(fields: [roleId], references: [id])
  roleId            Int
  password          String     @default("admin")
  active            Boolean    @default(true)
  hasUpdatePassword Boolean    @default(false)
  name              String
  lastLogin         DateTime?
  roleAccess        String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  deletedAt         DateTime?
  Profile           Profile?
  Employee          Employee?
}

model Profile {
  id            Int       @id @default(autoincrement())
  fullName      String?
  photo         String?
  bloodType     String?
  email         String?   @unique
  NIK           String?   @unique
  phone1        String?
  phone2        String?
  maritalStatus String?
  familyPhone   String?
  idAddress     String?
  houseAddress  String?
  institution   String?
  user          User      @relation(fields: [userId], references: [id])
  userId        Int       @unique
  major         String?
  degree        String?
  tribe         String?
  remarks       String?
  fatherName    String?
  motherName    String?
  spouseName    String?
  childrenName  String?
  siblingName   String?
  religion      String?
  gender        String?
  dob           DateTime?
  placeOfBirth  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}

model Position {
  id          Int              @id @default(autoincrement())
  code        String           @unique @default(uuid())
  name        String           @unique
  description String?
  active      Boolean          @default(true)
  category    PositionCategory @default(Edu)
  employees   Employee[]
  roleAccess  String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
}

model Employee {
  id               Int                @id @default(autoincrement())
  fullName         String
  photo            String?
  bloodType        String?
  NIP              String             @unique
  email            String             @unique
  NIK              String             @unique
  phone1           String
  phone2           String?
  contractStatus   String
  maritalStatus    String
  familyPhone      String
  idAddress        String
  houseAddress     String
  institution      String
  major            String
  degree           String
  tribe            String?
  unit             String?
  remarks          String?
  fatherName       String
  motherName       String
  spouseName       String?
  childrenName     String?
  siblingName      String?
  religion         String
  gender           String
  hireDate         DateTime
  PKWTStart        DateTime?
  TMT              DateTime?
  PKWTEnd          DateTime?
  dob              DateTime
  placeOfBirth     String
  positionId       Int
  position         Position           @relation(fields: [positionId], references: [id])
  user             User?              @relation(fields: [userId], references: [id])
  userId           Int?               @unique
  Class            Class[]
  LeaveEntitlement LeaveEntitlement[]
  LeaveRequest     LeaveRequest[]
  roleAccess       String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
}

model Parent {
  id          Int       @id @default(autoincrement())
  motherName  String
  motherPhone String
  motherEmail String
  motherPhoto String
  fatherName  String
  fatherPhone String
  fatherEmail String
  fatherPhoto String
  address     String
  children    Student[]
  roleAccess  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Student {
  id              Int               @id @default(autoincrement())
  gender          String
  dob             DateTime
  remarks         String
  bloodType       String
  firstName       String
  address         String
  tribe           String
  religion        String
  photo           String
  lastName        String
  class           Class             @relation(fields: [classId], references: [id])
  classId         Int
  Parent          Parent?           @relation(fields: [parentId], references: [id])
  parentId        Int?
  Extracurricular Extracurricular[]
  roleAccess      String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
}

model Extracurricular {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  name        String
  description String
  active      Boolean
  paid        Boolean
  price       Int
  student     Student[]
  roleAccess  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Class {
  id               Int       @id @default(autoincrement())
  className        String
  conselourTeacher Employee  @relation(fields: [employeeId], references: [id])
  students         Student[]
  employeeId       Int
  roleAccess       String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
}

model Vendor {
  id         Int       @id @default(autoincrement())
  name       String
  accountNo  String
  code       String    @unique
  address    String
  phone      String
  fax        String?
  blacklist  Boolean   @default(false)
  remarks    String?
  roleAccess String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model WorkUnit {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  name        String    @unique
  description String
  status      Boolean
  roleAccess  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Department {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  code        String      @unique
  active      Boolean     @default(true)
  description String?
  Inventory   Inventory[]
  roleAccess  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
}

model Uom {
  id          Int         @id @default(autoincrement())
  code        String      @unique
  name        String      @unique
  description String
  acronym     String      @unique
  active      Boolean     @default(true)
  Inventory   Inventory[]
  roleAccess  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
}

model Inventory {
  id           Int         @id @default(autoincrement())
  name         String      @unique
  code         String      @unique
  UOM          Uom         @relation(fields: [uomId], references: [id])
  uomId        Int
  owner        Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  remarks      String?
  qty          Int         @default(0)
  category     String      @default("inventory")
  departmentId Int?
  roleAccess   String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?
}

model LeaveType {
  id           Int            @id @default(autoincrement())
  code         String         @unique
  name         String
  active       Boolean        @default(true)
  description  String?
  LeaveRequest LeaveRequest[]
  roleAccess   String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
}

model LeaveEntitlement {
  id          Int       @id @default(autoincrement())
  entitlement Float
  remarks     String
  year        Int
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  Int
  roleAccess  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model LeaveRequest {
  id              Int       @id @default(autoincrement())
  employee        Employee? @relation(fields: [employeeId], references: [id])
  employeeId      Int?
  leaveType       LeaveType @relation(fields: [leaveTypeId], references: [id])
  leaveTypeId     Int
  status          String
  remarks         String
  approvalRemarks String?
  dateFrom        DateTime
  dateTo          DateTime
  roleAccess      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
}

enum Role {
  EmployeeNonEdu
  Teacher
  Parent
  Student
  Admin
  HR
  Superadmin
}

enum PositionCategory {
  Edu
  NonEdu
}
